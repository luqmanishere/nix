# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = ["usb_storage"];
  boot.kernelParams = lib.mkForce [
    "quiet"
    "earlycon"
    # "console=ttySAC0,115200n8"
    "console=tty0"
    "boot.shell_on_fail"
    "nvme_apple.flush_interval=0"
    "root=fstab"
    "splash"
    "loglevel=4"
    "rd.systemd.show_status=false"
    "rd.udev.log_level=3"
    # zswap config
    "zswap.enabled=1"
    "zswap.compressor=zstd"
    "zswap.zpool=zsmalloc"
    "zswap.max_pool_percent=50"
    # disable ipv6
    "ipv6.disable=1"
  ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/2824402a-e7b4-4f93-88ae-7f691ad049e4";
    fsType = "btrfs";
    options = ["subvol=root" "compress=zstd" "noatime"];
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/2824402a-e7b4-4f93-88ae-7f691ad049e4";
    fsType = "btrfs";
    options = ["subvol=home" "compress=zstd" "noatime"];
  };

  fileSystems."/nix" = {
    device = "/dev/disk/by-uuid/2824402a-e7b4-4f93-88ae-7f691ad049e4";
    fsType = "btrfs";
    options = ["subvol=nix" "compress=zstd" "noatime"];
  };

  fileSystems."/swap" = {
    device = "/dev/disk/by-uuid/2824402a-e7b4-4f93-88ae-7f691ad049e4";
    fsType = "btrfs";
    options = ["subvol=swap" "noatime"];
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/9693-1719";
    fsType = "vfat";
    options = ["fmask=0022" "dmask=0022"];
  };

  swapDevices = [
    {
      device = "/swap/swapfile";
      size = 12 * 1024;
    }
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlan0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "aarch64-linux";
}
