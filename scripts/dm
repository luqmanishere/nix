#!/usr/bin/env bash
# vi: ft=bash
#================================================================
# HEADER
#================================================================
#% SYNOPSIS
#+    ${SCRIPT_NAME} [command] ...
#%
#% DESCRIPTION
#%    d(otfile) m(anager)
#%    Helps shorten common operations in NixOS configuration
#%
#% COMMANDS
#%    home-switch <user@hostname>   rebuild and switch home-manager profile
#%    nix-switch <hostname>         rebuild and switch NixOS profile
#%    help                          show this message
#%    updateall                     update all inputs, then rebuilds all configurations
#%                                  requires clean git
#%
#================================================================
#- IMPLEMENTATION
#-    version         ${SCRIPT_NAME} 0.0.4
#-    author          solemnattic
#-
#================================================================
#  HISTORY
#     2022/02/15 : solemnattic : Script creation
# 
#================================================================
#  DEBUG OPTION
#    set -n  # Uncomment to check your syntax, without execution.
#    set -x  # Uncomment to debug this shell script
#
#================================================================
# END_OF_HEADER
#================================================================

OPTS1=$1
OPTS2=$2


  #== needed variables ==#
SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
SCRIPT_NAME="$(basename ${0})"

  #== usage functions ==#
usage() { printf "Usage: "; head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#+" | sed -e "s/^#+[ ]*//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
usagefull() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+-]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
scriptinfo() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#-" | sed -e "s/^#-//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g"; }

if [ $# == 0 ]
then
    usage
fi

if [ "$OPTS1" = "nix-switch" ] 
then
    if [ -z "$2" ]
    then
        NIX_ARG=$(hostname)
    else
        NIX_ARG=$2
    fi
    NIX_COMM="sudo nixos-rebuild switch --flake .#$NIX_ARG"
    echo "rebuilding nixos profile for $NIX_ARG"
    echo "running command $NIX_COMM"
    $NIX_COMM
elif [ "$OPTS1" = "home-switch" ]
then
    if [ -z "$2" ]
    then
        HOME_ARG="$(whoami)@$(hostname)"
    else
        HOME_ARG=$2
    fi
    HOME_COMM="home-manager switch --flake .#$HOME_ARG"
    echo "rebuilding home-manager profile for $HOME_ARG"
    echo "running command $HOME_COMM"
    $HOME_COMM
elif [ "$OPTS1" = "updateall" ]
then
  NIX_ARG=$(hostname)
  NIX_COMM="sudo nixos-rebuild switch --flake .#$NIX_ARG"
  HOME_ARG="$(whoami)@$(hostname)"
  HOME_COMM="home-manager switch --flake .#$HOME_ARG"
  UPD_FLAKE="nix flake update"

  echo "updating flake inputs and rebuilding configurations..."
  # check if git is dirty, then fail if it is unless flag is passed
  if [[ $(git diff --stat) != '' ]]; then
    echo 'Detected uncomitted changes, cancelling operations'
    echo 'run with (wip) flag to override'
    exit 1
  else
    echo 'git is clean, ready to go'

    echo "updating flake inputs"
    echo "running command $UPD_FLAKE"
    $UPD_FLAKE

    echo "rebuilding nixos profile for $NIX_ARG"
    echo "running command $NIX_COMM"
    $NIX_COMM

    echo "rebuilding home-manager profile for $HOME_ARG"
    echo "running command $HOME_COMM"
    $HOME_COMM
  fi
elif [ "$OPTS1" = "help" ]
then
    usagefull
elif [ "$OPTS1" = "scriptinfo" ]
then
    scriptinfo
else
    usagefull
fi


